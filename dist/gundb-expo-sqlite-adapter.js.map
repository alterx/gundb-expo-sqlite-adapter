{"version":3,"file":"gundb-expo-sqlite-adapter.js","sources":["../src/index.ts"],"sourcesContent":["export type SQLiteOptions = {\n  SQLite,\n  databaseName: string;\n  table: string;\n  onError: Function,\n  onReady: Function,\n  onOpen: Function,\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    sqlite: SQLiteOptions,\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport const makeStoreAdapter = (Gun, autoInit = true) => {\n  let isInitialized = false;\n  const Store = (opt: GunOptions) => {\n    let db;\n    let isReady = false;\n\n    const sqlOpt: SQLiteOptions = {\n      databaseName: 'gun.db',\n      table: 'radata',\n      onError: () => {},\n      onOpen: () => {},\n      onReady: () => {},\n      SQLite: null,  \n      ...opt.sqlite\n    };\n\n    if (!sqlOpt.SQLite) {\n      throw 'Please provide SQLite (expo-sqlite)';\n    }\n\n    // Acquire DB connection\n    db = sqlOpt.SQLite.openDatabase(sqlOpt.databaseName);\n    const tableName = sqlOpt.table;\n\n    // Prepare the DB\n    db.transaction(\n      tx => {\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS ${tableName} (key PRIMARY KEY, val)`, [])\n      },\n      sqlOpt.onError,\n      () =>  {\n        sqlOpt.onReady.call(null);\n        isReady = true;\n      }\n    );\n\n    const store = {\n      get: (key, done) => {    \n        if (!isReady) { setTimeout(() => store.get(key, done), 9); return; }\n\n        db.transaction(tx => {\n            tx.executeSql(\n                `SELECT * FROM ${tableName} WHERE key = ?`, [key],\n                (tx, results) => {\n                  const item = results.rows.item(0);\n                  done(null, item?.val || '');\n                },\n                (tx, err) => done(err || 5)\n            );\n        }); \n      },\n\n      put: (key, data, done) => {\n        if (!isReady) { setTimeout(() => store.put(key, data, done), 1); return; }\n\n        const inserts = [{\n          sql: `INSERT OR REPLACE INTO ${tableName} (key, val) VALUES (?,?)`,\n          vars: [key, data]\n        }];\n\n        // Run transactions\n        db.transaction(\n          tx => inserts.forEach(row => tx.executeSql(row.sql, row.vars)),\n          err => done(err || 'put.tx.error'),\n          () => done(null)\n        );\n      }\n    }\n    \n    return store;\n  }\n\n  const init = () => {\n    if (isInitialized) {\n      throw 'Already sqlite adapter initialized.'\n    }\n\n    try {\n      Gun.on('create', function (this: typeof Gun, root) {\n        this.to.next(root);\n        root.opt.store = root.opt.store || Store(root.opt);\n        isInitialized = true;\n      });\n    } catch(e) {}\n  }\n\n  if (autoInit && !isInitialized) {\n    init();\n  }\n\n  return {\n    init\n  }\n}\n\n"],"names":["makeStoreAdapter","Gun","autoInit","isInitialized","Store","opt","db","isReady","sqlOpt","databaseName","table","onError","onOpen","onReady","SQLite","sqlite","openDatabase","tableName","transaction","tx","executeSql","call","store","get","key","done","setTimeout","results","item","rows","val","err","put","data","inserts","sql","vars","forEach","row","init","on","root","to","next","e"],"mappings":"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"}