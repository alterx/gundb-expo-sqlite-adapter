{"version":3,"file":"gundb-expo-sqlite-adapter.umd.js","sources":["../src/index.ts"],"sourcesContent":["export type SQLiteOptions = {\n  SQLite,\n  databaseName: string;\n  table: string;\n  onError: Function,\n  onReady: Function,\n  onOpen: Function,\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    sqlite: SQLiteOptions,\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport const makeStoreAdapter = (Gun, autoInit = true) => {\n  let isInitialized = false;\n  const Store = (opt: GunOptions) => {\n    let db;\n    let isReady = false;\n\n    const sqlOpt: SQLiteOptions = {\n      databaseName: 'gun.db',\n      table: 'radata',\n      onError: () => {},\n      onOpen: () => {},\n      onReady: () => {},\n      SQLite: null,  \n      ...opt.sqlite\n    };\n\n    if (!sqlOpt.SQLite) {\n      throw 'Please provide SQLite (expo-sqlite)';\n    }\n\n    // Acquire DB connection\n    db = sqlOpt.SQLite.openDatabase(sqlOpt.databaseName);\n    const tableName = sqlOpt.table;\n\n    // Prepare the DB\n    db.transaction(\n      tx => {\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS ${tableName} (key PRIMARY KEY, val)`, [])\n      },\n      sqlOpt.onError,\n      () =>  {\n        sqlOpt.onReady.call(null);\n        isReady = true;\n      }\n    );\n\n    const store = {\n      get: (key, done) => {    \n        if (!isReady) { setTimeout(() => store.get(key, done), 9); return; }\n\n        db.transaction(tx => {\n            tx.executeSql(\n                `SELECT * FROM ${tableName} WHERE key = ?`, [key],\n                (tx, results) => {\n                  const item = results.rows.item(0);\n                  done(null, item?.val || '');\n                },\n                (tx, err) => done(err || 5)\n            );\n        }); \n      },\n\n      put: (key, data, done) => {\n        if (!isReady) { setTimeout(() => store.put(key, data, done), 1); return; }\n\n        const inserts = [{\n          sql: `INSERT OR REPLACE INTO ${tableName} (key, val) VALUES (?,?)`,\n          vars: [key, data]\n        }];\n\n        // Run transactions\n        db.transaction(\n          tx => inserts.forEach(row => tx.executeSql(row.sql, row.vars)),\n          err => done(err || 'put.tx.error'),\n          () => done(null)\n        );\n      }\n    }\n    \n    return store;\n  }\n\n  const init = () => {\n    if (isInitialized) {\n      throw 'Already sqlite adapter initialized.'\n    }\n\n    try {\n      Gun.on('create', function (this: typeof Gun, root) {\n        this.to.next(root);\n        root.opt.store = root.opt.store || Store(root.opt);\n        isInitialized = true;\n      });\n    } catch(e) {}\n  }\n\n  if (autoInit && !isInitialized) {\n    init();\n  }\n\n  return {\n    init\n  }\n}\n\n"],"names":["makeStoreAdapter","Gun","autoInit","isInitialized","Store","opt","db","isReady","sqlOpt","databaseName","table","onError","onOpen","onReady","SQLite","sqlite","openDatabase","tableName","transaction","tx","executeSql","call","store","get","key","done","setTimeout","results","item","rows","val","err","put","data","inserts","sql","vars","forEach","row","init","on","root","to","next","e"],"mappings":"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"}